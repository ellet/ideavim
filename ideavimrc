
"-------------------- Intro --------------------

" General information at the bottom


"-------------------- Plugins/Settings --------------------

" Turn of error feedback for invalid inputs
set visualbell
set noerrorbells

" If any letter is uppercase when searching will make the search be case sensitive.
set smartcase
" Search wile typing
set incsearch
" Highlight matching search terms
set hlsearch

" How close the cursor can get to the edge before the window will scroll.
set scrolloff=10

" Show line numbers
set number
" Make the line numbers be relative to the cursor (Active line show actual line number)
set relativenumber

" Does a small flash that shows what text has been janked.
set highlightedyank

" Turn on allowing Vim controlls in the file browser.
set NERDTree

" Makes editing surround characters easier - Easier to change "" -> ''
set surround

" set clipboard += unnamed - Combines registers and the clipboard. Currently don't want to use it.


"-------------------- General Remaping --------------------
" Escapes i've learned from other editors and now I'm broken.
inoremap jk <Esc>
imap <C-g> <Esc>

"-------------------- Basics Actions --------------------
nmap U <Action>($Redo)
nmap <C-s> <Action>(SaveDocument)
nmap <C-p> <Action>(GotoClass)


"-------------------- Navigation --------------------
nmap <A-z> <Action>(Back)
nmap <A-x> <Action>(Forward)

sethandler <A-v> a:vim
nmap <A-v> <Action>(GotoPreviousError)

sethandler <A-b> a:vim
nmap <A-b> <Action>(GotoNextError)

nmap ,l <action>(SwitchHeaderSource)


"-------------------- Goto/Find --------------------
nmap <A-m> <Action>(FileStructurePopup)
nmap <A-s> <Action>(GotoSymbol)
nmap <A-f> <Action>(GotoFile)
nmap <A-d> <Action>(GotoDeclaration)
nmap <A-g> <Action>(GotoDeclaration)

nmap ,f <Action>(FindUsages)
nmap ,z <Action>(Switcher)

" Clear current highlighted search
nnoremap ,ss :noh<CR>


"-------------------- WindowControl --------------------
nmap <S-Left> <Action>(MoveEditorToOppositeTabGroup)
nmap <S-Right> <Action>(MoveEditorToOppositeTabGroup)


"-------------------- TabControl --------------------
nmap ,q <action>(CloseContent)

"-------------------- TextFormatting --------------------
nmap ,cc <Action>(CommentByLineComment)
vmap ,cc <Action>(CommentByLineComment)
nmap <A-i> <Action>(AutoIndentLines)

map J <action>(MoveLineDown)
map K <action>(MoveLineUp)

" Stay in visual mode / keep the same selection when indenting
vnoremap < <gv
vnoremap > >gv


"-------------------- CodeGeneration --------------------
nmap ,G <Action>(Generate)


"-------------------- CodeEditing --------------------
nmap R <action>(RenameElement)


"-------------------- BuildActions --------------------
"to unlearn using this for build I'm mapping it to only resume.
sethandler <F5> a:vim
map <F5> <Action>(Resume)

sethandler <F10> a:vim
map <F10> <Action>(StepOver)

sethandler <F11> a:vim
map <F11> <Action>(StepInto)

if &ide =? 'Jetbrains rider'
    nmap B <Action>(BuildSolutionAction)
    nmap ,bd <Action>(mainRunToolbarDebugProcess)
    nmap ,br <Action>(mainRunToolbarRunProcess)
elseif &ide =? 'RustRover'
    nmap B <Action>(Rust.Build)
    nmap ,bd <Action>(Debug)
    nmap ,br <Action>(Run)
elseif &ide =? 'IntelliJ IDEA Ultimate Edition'
    nmap ,bd <Action>(Debug)
    nmap ,br <Action>(Run)
endif

nmap ,bc <Action>(CancelAllBuildActions)
nmap ,bs <Action>(Stop)


"-------------------- SourceControl --------------------
nmap ,e <Action>(PerforceDirect.Edit)

nmap ,ga <action>(Git.Add)
nmap ,gg <action>(ActivateCommitToolWindow)
nmap ,gpu <action>(Git.Pull)

map ,gi <action>(Vcs.Diff.IncludeWholeChangedLinesIntoCommit)

"-------------------- Terminal --------------------
nmap <C-T> <Action>(ActivateTerminalToolWindow)
nmap ,t <Action>(Terminal.OpenInTerminal)


"-------------------- ViewMod --------------------
nmap ,zen <action>(ToggleDistractionFreeMode)


"-------------------- Bookmarks --------------------
nmap <A-Y> mT
sethandler <A-T> a:vim
nmap <A-T> mY'T
sethandler <A-R> a:vim
nmap <A-R> 'Y

"-------------------- Harpooner --------------------
nmap ,hy <action>(HarpoonerOpenFile0)
nmap ,hq <action>(HarpoonerOpenFile1)
nmap ,hw <action>(HarpoonerOpenFile2)
nmap ,he <action>(HarpoonerOpenFile3)
nmap ,hr <action>(HarpoonerOpenFile4)
nmap ,ht <action>(HarpoonerOpenFile5)
nmap ,ha <action>(HarpoonerOpenFile6)
nmap ,hs <action>(HarpoonerOpenFile7)
nmap ,hd <action>(HarpoonerOpenFile8)
nmap ,hf <action>(HarpoonerOpenFile9)

nmap <C-c> <action>(HarpoonerQuickMenu)
nmap ,hh <action>(HarpoonerAddFile)

nmap <C-x> <action>(HarpoonerNextFileAction)
sethandler <C-x> a:vim
nmap <C-z> <action>(HarpoonerPreviousFileAction)
sethandler <C-z> a:vim

"-------------------- Copy/Paste Macros --------------------
"Replace current word with paste buffer.
nnoremap S "_diwP

"Paste latest yank (0 buffer doesn't get overwritten by a delete)
sethandler <A-P> a:vim
nmap <A-P> "0p

"Replace block with 0 buffer
nmap ,rb dib"0P
nmap ,rB dibb"0p

"Copy to clipboard
nnoremap ,cl "+yiw
vnoremap ,cl "+y

"Copy from clipboard
nmap ,cp "+p
nmap ,cP "+P


"-------------------- IdeaVim --------------------
nmap ,ref <Action>(IdeaVim.ReloadVimRc.reload)
"this currently doesn't seem to work
nmap ,gref :e ~/.ideavimrc<CR>


"-------------------- MiscFixes --------------------
"If you select text in the DebuggerOutput Window then IdeaVIM is going to put you into either insert mode or visual mode
" This binding allows doing a search in that window.
imap <C-s> <Action>(Find)
vmap <C-s> <Action>(Find)
imap <C-f> <Action>(Find)



"-------------------- Information --------------------

" --- Finding Actions ---
" The best way to find actions is to turn on ideavim: Track Action Ids" (do find symbols and then tab to actions)
" This will make the text editor do a popup whenever a actions is triggered that says the name of that action.

" you can also do the command :ActionList <search-term> to find them but Track action have given me greater success.

" --- IDE specific binds ---
" Todo specific bind for a specific editor you can do a if check on the ide name like this
" if &ide =? "Name of editor"
" [tab] specific bind

" to find the name of the editor you are currently in you can do this command:
" :echo &ide

" --- SetHandler ---
" To handle keybind conflict you can set priority for what will handle a specific press

" You do a sethandler <binding> a:vim

" This will make IdeaVim be the handler of the binding.

"-------------------- Standard bindings --------------------
" Some editor bindings that I'm not changing but nice to document

" ----- Window panes -----

" --- Rider ---

" --- Writerside ---
" A-0 - Staging window
" A-1 - Filebrowser
" A-2 - Bookmarks
" A-3 - Find
" A-4 - Run
" A-5 - Debugger
" A-6 - Problems
" A-7 - Structure
" A-8 - Services
" A-9 - Git/SourceControl

" --- PyCharm ---
" A-0 - Staging window
" A-1 - Filebrowser
" A-2 - Favories/Bookmarks
" A-3 - Find
" A-4 - Run
" A-5 - Debugger
" A-6 - Problems
" A-7 - Structure
" A-8 - Services
" A-9 - Git/SourceControl

" --- RustRover ---
